# vim: set filetype=sh shiftwidth=2 expandtab smarttab cindent:
myfunc() {
  declare -f | grep -E '^[a-z][a-z-]* \(\)'
}

mybin-update() {
  pushd ~/bin && git pull --rebase
  git diff --stat --exit-code ORIG_HEAD -- mygitconf   || ./mygitconf
  git diff --stat --exit-code ORIG_HEAD -- myfunctions || . myfunctions
  git diff --stat --exit-code ORIG_HEAD -- myaliases   || . myaliases
  popd
}
curl-github() {
  echo "get https://raw.githubusercontent.com/$1 -- <USER>/<PROJECT>/<BRANCH>/<PATH-TO-FILE>"
  curl -O "https://raw.githubusercontent.com/$1"
}
apt-history() {
  # listup logs, oldest first order
  local pkg=$(command ls -rt /var/log/dpkg.log*)
  local apt=$(command ls -rt /var/log/apt/history.log*)
  if [ -z "$pkg" ]; then
    echo 'not found: /var/log/dpkg.log*'
    return
  fi
  if [ -z "$apt" ]; then
    echo 'not found: /var/log/apt/history.log*'
    return
  fi
  case "$1" in
    -h|-\?|--help)
      echo 'usage: apt-histroy [install|upgrade|remove|list]'
      return
      ;;
    install|upgrade|remove)
      zcat -f $pkg | grep -E "^[0-9][0-9-]+ [0-9][0-9:]+ $1 "
      ;;
    list)
      echo '=== apt list --installed'
      LANG=C    apt list --installed | grep -v -F automatic
      echo '=== dpkg --get-selections'
      LANG=C    dpkg --get-selections
      echo '=== snap list'
      LANG=C    snap list
      ;;
    *)
      zcat -f $apt | less
      ;;
  esac
}

lltop() {
# parse lltop's option in the first arg only
  local n=10
  case $1 in
    -[0-9]*)
      n=${1:1} # remove '-' at top of $1
      shift
      ;;
    -h|-\?|--help)
      echo 'usage: lltop [-N -h -? --help] [ls arguments ...]'
      return
      ;;
  esac
# parse ls arguments
  local opt files=()
  while (( $# > 0 )); do
    case $1 in
      --)
        break
        ;;
      -R|--recursive) # remove incompatible-list-options for lltop
        ;;
      -*)
        opt+=" $1"
        ;;
      *)
        files+=("$1")
        ;;
    esac
    shift
  done
  while (( $# > 0 )); do
    files+=("$1") # after "--" args is files
    shift
  done
# if $files[] has none or only-one-directory, then fill myself.
  local f
  if (( ${#files[@]} == 0 )); then
    files=(); for f in *; do files+=("$f"); done
  elif (( ${#files[@]} == 1 )) && [ -d "${files[0]}" ]; then
    local dir="${files[0]}"
    files=(); for f in "$dir"/*; do files+=("$f"); done
  fi
# let print lltop of $files[] with $opt
  echo "=== Top new $n ==="
  eval ll $opt -dt $(command ls $opt -1dt "${files[@]}" | head -$n | sed -e 's/[ ()]/\\&/g')
  echo "=== Top big $n ==="
  eval ll $opt -dS $(command ls $opt -1dS "${files[@]}" | head -$n | sed -e 's/[ ()]/\\&/g')
##  echo "=== n:$n, opt:$opt, files:${files[@]}"
##  echo "=== command ls opt -1dt files" ; command ls $opt -1dt "${files[@]}"
}

yesno() {
  local yn
  case $1 in
    -c)
      shift
      read -r -p "$* [y/N] " yn
      case $yn in
        Y|y|yes)
          eval "$@"
          # do not use "true" here. keep command-status
          ;;
        *)
          false
          ;;
      esac
      return
      ;;
    -h|-\?|--help)
      echo 'usage: yesno "prompt"'
      echo '       yesno -c command arg1 arg2 ...'
      return
      ;;
  esac
  read -r -p "${*:-OK? [y/N]} " yn
  case $yn in
    Y|y|yes)
      true
      ;;
    *)
      false
      ;;
  esac
}

cdx()
{
  if [ -z "$1" ]; then
    cd
    return
  fi
  local dir
  for dir in $@ $1* ../$1* ../../$1* ~/$1* ~/GitHub/$1* ~/BitBucket/$1* ~/install/$1*; do
    if [ -d "$dir" ]; then
      pushd "$dir"
      return
    fi
  done
}

setlang()
{
  case $1 in
    sjis)
      export LANG=ja_JP.SJIS
      export LESSCHARSET=dos;;
    utf8)
      export LANG=ja_JP.UTF-8
      export LESSCHARSET=utf-8;;
    utf8n)
      export LANG=ja_JP.UTF-8@cjknarrow
      export LESSCHARSET=utf-8;;
    en)
      export LANG=en_US.UTF-8
      export LESSCHARSET=utf-8;;
    C)
      export LANG=C
      export LESSCHARSET=utf-8;;
    *)
      echo "usage: setlang [sjis|utf8|utf8n|en|C]";;
  esac
  locale
  printenv LESSCHARSET
}

settimestyle()
{
  case $1 in
    iso|long-iso|full-iso)
      export TIME_STYLE=$1;;
    sec-iso)
      export TIME_STYLE="+%Y-%m-%d %H:%M:%S";;
    clear)
      unset TIME_STYLE;;
    *)
      echo "usage: settimestyle [iso|long-iso|sec-iso|full-iso|clear]";;
  esac
}

histclean()
{
  # save current history to $HISTFILE.
  history -w
  if [ "$1" == "-e" ]; then
    # edit history
    ${EDITOR:-vi} $HISTFILE
    history -c && history -r $HISTFILE
  else
    # remove status check commands from history.
    local new=$(mktemp)
    command egrep -vw \
      -e '^(ls|ll|lt|la|l|h|[ef]?grep|ps|jobs|diff|less|man|help|histclean)' \
      -e '^(#|if|for)' \
      -e '^(logs|logss|st|sts)' \
      -e '^git (status|show|help|grep|diff.?|log.?|today.?|reflog.?|show.?|[a-z]l|st|sts|crlf|logss|todayss|[hr]date|nolog)' \
      $HISTFILE > $new
    history -c && history -r $new && history -w
    command rm $new
  fi
}
