#!/bin/bash
DIFF=${DIFF:-diff -wsq --color=auto} # diffopt:: -w:ignore-all-space, -s:show-identical-files, -q:quiet

usage() { cat <<EOF
$*

Usage:
    backcp FILE         # cp --backup=t FILE FILE.bak
    backcp FILE DIR     # cp --backup=t FILE DIR/FILE
    backcp -t DIR FILE  # cp --backup=t FILE DIR/FILE
    backcp FILE1 FILE2  # cp --backup=t FILE1 FILE2
    backcp <(CMD) FILE2 # cp --backup=t <(CMD) FILE2
    backcp DIR1 DIR2    # cp -ipru --backup=t DIR1 DIR2
    backcp <(CMD) DIR FILE2    # cp --backup=t <(CMD) DIR/FILE2
    backcp -t DIR <(CMD) FILE2 # cp --backup=t <(CMD) DIR/FILE2
    DIFF=diffcmd backcp ...

Options:
    --help, -h, -?  show help

diffcmd:
    default:'diff -wsq --color=auto' now '$DIFF'
EOF
}
help_exit() {
	usage "copy FILE to FILE.bak or DIR/FILE."
	exit 0
}
error_exit() {
	usage $1 >&2
	exit 1
}
# parse command line
case $1 in
--help|-h|-\?|"") help_exit;;
-t)
	shift
	[ -z "$1" ] && error_exit "please specify DIR for -t"
	[ -d "$1" ] || mkdir "$1"
	[ -d "$1" ] || error_exit "please specify DIR for -t"
	dst=$1; src=$2;;
*)
	src=$1; dst=$2;;
esac
if [ -p "$src" ]; then
	# $src: <(CMD)
	[ -d "$dst" ] && dst="${dst%/}/$3"
	if [ -d "$dst" ] || [ -z "$dst" ]; then
		error_exit "$src is pipe, please specify FILE2"
	fi
elif [ -f "$src" ] && [ -d "$dst" ]; then
	dst="${dst%/}/$(basename $src)"
fi
# backup copy
function mybackup {
	[ -f "$1" ] && [ -f "$2" ] && $DIFF $1 $2 && exit 0 # 内容同一ならbackupは不要なのでexitする.
	cp -ip --backup=t $1 $2
}
# print exist backup-files and do backup
if [ -d "$src" ]; then
	cp -ipru --backup=t "$src" "$dst" # recursive-update-copy from $src/* to $dst/$src/*
elif [ -n "$dst" ]; then
	[ -f "$dst" ] && ls -lFt $dst $dst.~*
	mybackup $src $dst
else
	[ -f "$src" ] && ls -lFt $src $src.bak*
	mybackup $src{,.bak}
fi
